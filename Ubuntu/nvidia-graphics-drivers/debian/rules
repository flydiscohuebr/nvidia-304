#!/usr/bin/make -f
#
# Copyright (C) 2009 Canonical Ltd
# Authors: Alberto Milone
#
# This file on the Mandriva nvidia packages, on Ubuntu's previous
# nvidia packaging scripts and on Ubuntu's fglrx scripts.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

include /usr/share/cdbs/1/rules/debhelper.mk

DEB_HOST_MULTIARCH ?= $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)
# If the host is i386 set OTHER_ARCH to x86_64 and vice versa
OTHER_ARCH := $(shell (echo "$(DEB_HOST_MULTIARCH)" | grep i386 >/dev/null) && \
		echo "$(DEB_HOST_MULTIARCH)" | sed s/i386/x86_64/ || \
		echo "$(DEB_HOST_MULTIARCH)" | sed s/x86_64/i386/)

# Hack for pbuild
PATH := $(PATH):/usr/sbin

# Package names
PKG_flavour          := $(shell dpkg-parsechangelog | sed -n 's/^Source: //p' | sed 's/nvidia\-graphics\-drivers\-//g')
PKG_driver           := nvidia-$(PKG_flavour)
PKG_driver_dev       := $(PKG_driver)-dev
PKG_version          := $(shell dpkg-parsechangelog | awk -F' ' '/^Version:/ {print $$2}' | awk -F- '{print $$1}')
PKG_version          := $(shell echo $(PKG_version) | sed s/.*\.really\.//g)
PKG_source           := $(shell dpkg-parsechangelog | sed -n 's/^Source: //p')
PKG_module           := $(shell echo "$(PKG_driver)" | sed s/\-/_/g)


# Priority of the alternative
alt_priority         := 9701

# Installer details
dirname_x86          ?= NVIDIA-Linux-x86-$(PKG_version)
dirname_x86_64       ?= NVIDIA-Linux-x86_64-$(PKG_version)-no-compat32
filename_x86         := $(dirname_x86).run
filename_x86_64      := $(dirname_x86_64).run
url_x86              := http://us.download.nvidia.com/XFree86/Linux-x86/$(PKG_version)/$(filename_x86)
url_x86_64           := http://us.download.nvidia.com/XFree86/Linux-x86_64/$(PKG_version)/$(filename_x86_64)

ifeq ($(DEB_BUILD_ARCH),amd64)
filename             := $(filename_x86_64)
dirname              := $(dirname_x86_64)
dirname32            := $(dirname_x86)
url                  := $(url_x86_64)
web_arch             := amd64
else
filename             := $(filename_x86)
dirname              := $(dirname_x86)
url                  := $(url_x86)
web_arch             := ia32
endif

release_notes        := http://www.nvidia.com/object/linux-display-$(web_arch)-$(PKG_version)-driver.html

bindir               := /usr/bin
datadir              := /usr/share
PKG_datadir          := $(datadir)
libdir               := /usr/lib
libdir32             := /usr/lib32
libdir_multiarch     := $(libdir)/$(DEB_HOST_MULTIARCH)
libdir_multiarch_other := $(libdir)/$(OTHER_ARCH)
includedir           := /usr/include
sysconfdir           := /etc
PKG_libdir           := $(libdir_multiarch)
PKG_libdir32         := $(libdir_multiarch_other)
xorg_libdir          := $(libdir)/xorg
xorg_extra_path      := $(libdir)/$(DEB_HOST_MULTIARCH)/xorg
xorg_extra_modules   := $(xorg_extra_path)/extra-modules
xorg_extensionsdir   := $(xorg_libdir)/modules/extensions
PKG_driversdir       := $(libdir)/$(PKG_driver)/xorg
PKG_extensionsdir    := $(PKG_driversdir)
PKG_bindir           := $(bindir)
PKG_configdir        := $(PKG_libdir)

mandir               := /usr/share/man/man1
PKG_bugdir           := /usr/share/bug/$(PKG_driver)
PKG_vdpaudir         := $(PKG_libdir)/vdpau
PKG_tlsdir           := $(PKG_libdir)/tls
PKG_vdpaudir32       := $(PKG_libdir32)/vdpau
PKG_tlsdir32         := $(PKG_libdir32)/tls
vdpaudir             := $(libdir)/vdpau
tlsdir               := $(libdir)/tls
vdpaudir32           := $(libdir32)/vdpau
tlsdir32             := $(libdir32)/tls
grub_blacklistdir    := /usr/share/grub-gfxpayload-lists/blacklist

# This is a hack to make sure that
# the blacklist file is available
# early in the boot process when
# /usr is on a separate partition.
# See LP: #538071.
PKG_libconfdir := $(sysconfdir)

# blacklist either the -updates or the non updates flavour
opposite_flavour := $(shell (echo "$(PKG_driver)" | grep updates >/dev/null) && \
        echo "$(PKG_driver)" | sed s/-updates// || \
        echo "$(PKG_driver)-updates")

#These "define" bits are needed for the blacklist file
define newline


endef

define blacklist_file
# This file was installed by $(PKG_driver)
# Do not edit this file manually

blacklist nouveau
blacklist lbm-nouveau
alias nouveau off
alias lbm-nouveau off
endef

override_dh_shlibdeps:
	dh_shlibdeps -Xtls -Xconf -X$(PKG_libdir32) -X$(libdir_multiarch_other) \
	-l$(CURDIR)/debian/$(PKG_driver)$(PKG_libdir)/:$(CURDIR)/debian/$(PKG_driver_dev)$(PKG_libdir)/:$(libdir)/

.PHONY: get-orig-source
get-orig-source:
	# Remove any previous installers
	rm -f NVIDIA-Linux-x86*
	# Downloads the installers from NVIDIA's website
	wget $(url_x86) $(url_x86_64)

.PHONY: gen-abi-substvars
gen-abi-substvars:
	# Generate the xserver ABI dependencies
	cat debian/substvars >> debian/$(PKG_driver).substvars

.PHONY: regen-from-templates
regen-from-templates:
	# Get rid of files belonging to different flavours
	for i in debian/templates/*.in; do \
		old=`echo $$i | sed -e "s|templates\/||g" | \
				sed -e "s|\.in\$$||g" | \
				sed -e "s|nvidia-graphics-drivers|nvidia-*|g" | \
				sed -e "s|flavour|*|g"`; \
		rm -f $$old; done
	# Create important strings
	for i in debian/templates/*.in; do \
		dest=`echo $$i | sed -e "s|templates\/||g" | \
				 sed -e "s|\.in\$$||g" | \
				 sed -e "s|nvidia-graphics-drivers|$(PKG_driver)|g" | \
				 sed -e "s|flavour|$(PKG_flavour)|g"`; \
		sed -e "s|#LIBDIR#|$(libdir)|g"         \
			-e "s|#LIBDIR32#|$(libdir32)|g"     \
			-e "s|#LIBDIRMULTIARCH#|$(libdir_multiarch)|g" \
			-e "s|#LIBDIRMULTIARCHOTHER#|$(libdir_multiarch_other)|g" \
			-e "s|#BINDIR#|$(bindir)|g"         \
			-e "s|#VERSION#|$(PKG_version)|g"   \
			-e "s|#SYSCONFDIR#|$(sysconfdir)|g" \
			-e "s|#MANDIR#|$(mandir)|g" \
			-e "s|#LDSOCONF#|$(ld_so_conf_path)|g" \
			-e "s|#ALTLDSOCONF#|$(alt_ld_so_conf_path)|g" \
			-e "s|#ALTPRIORITY#|$(alt_priority)|g" \
			-e "s|#DATADIR#|$(datadir)|g" \
			-e "s|#PKGDATADIR#|$(PKG_datadir)|g" \
			-e "s|#PKGCONFIGDIR#|$(PKG_configdir)|g" \
			-e "s|#PKGBINDIR#|$(PKG_bindir)|g" \
			-e "s|#PKGLIBDIR#|$(PKG_libdir)|g" \
			-e "s|#PKGLIBDIR32#|$(PKG_libdir32)|g" \
			-e "s|#PKGDRIVERSDIR#|$(PKG_driversdir)|g" \
			-e "s|#XORGEXTRA#|$(xorg_extra_modules)|g" \
			-e "s|#XORGEXTRAPATH#|$(xorg_extra_path)|g" \
			-e "s|#NVIDIAEXTENSION#|$(PKG_extensionsdir)|g" \
			-e "s|#XORGEXTENSIONSDIR#|$(xorg_extensionsdir)|g" \
			-e "s|#DRIVERNAME#|$(PKG_driver)|g" \
			-e "s|#FLAVOUR#|$(PKG_flavour)|g" \
			-e "s|#DRIVERDEVNAME#|$(PKG_driver_dev)|g" \
			-e "s|#DRIVERSRCNAME#|$(PKG_source)|g" \
			-e "s|#MODULENAME#|$(PKG_module)|g" \
			-e "s|#DIRNAME#|$(dirname)|g" \
			-e "s|#DIRNAME32#|$(dirname32)|g" \
			-e "s|#INCLUDEDIR#|$(includedir)|g" \
			-e "s|#URL#|$(url)|g" \
			-e "s|#VDPAUDIR#|$(vdpaudir)|g" \
			-e "s|#VDPAUDIR32#|$(vdpaudir32)|g" \
			-e "s|#TLSDIR#|$(tlsdir)|g" \
			-e "s|#PKGVDPAUDIR#|$(PKG_vdpaudir)|g" \
			-e "s|#PKGVDPAUDIR32#|$(PKG_vdpaudir32)|g" \
			-e "s|#PKGTLSDIR#|$(PKG_tlsdir)|g" \
			-e "s|#PKGTLSDIR32#|$(PKG_tlsdir32)|g" \
			-e "s|#PKGLIBCONFDIR#|$(PKG_libconfdir)|g" \
			-e "s|#GRUBBLKLISTDIR#|$(grub_blacklistdir)|g" \
			-e "s|#DEB_HOST_MULTIARCH#|$(DEB_HOST_MULTIARCH)|g" \
			-e "s|#OTHER_ARCH#|$(OTHER_ARCH)|g" \
			-e "s|#RELEASENOTES#|$(release_notes)|g" \
			$$i > $$dest;      \
	done
ifeq ($(DEB_BUILD_ARCH),amd64)
	# Deal with the links for 32 bit libraries

	# $(PKG_driver)
	cat $(CURDIR)/debian/$(PKG_driver).links $(CURDIR)/debian/$(PKG_driver).links32 > \
	$(CURDIR)/debian/$(PKG_driver).links_new
	mv -f $(CURDIR)/debian/$(PKG_driver).links_new $(CURDIR)/debian/$(PKG_driver).links

	#idk
	cat $(CURDIR)/debian/$(PKG_driver).dirs $(CURDIR)/debian/$(PKG_driver).dirs32 > \
	$(CURDIR)/debian/$(PKG_driver).dirs_new
	mv -f $(CURDIR)/debian/$(PKG_driver).dirs_new $(CURDIR)/debian/$(PKG_driver).dirs
endif
# Pre-config
#makebuilddir/$(PKG_driver):: regen-from-templates

configure/$(PKG_driver)::
	rm -rf $(dirname_x86) $(dirname_x86_64)

	# Extract the installers
	sh $(filename) --extract-only

ifeq ($(DEB_BUILD_ARCH),amd64)
	sh $(filename_x86) --extract-only
endif

	# Get around Xen checks
	mv $(dirname)/kernel/nv.c $(dirname)/kernel/nv1.c
	mv $(dirname)/kernel/nv-linux.h $(dirname)/kernel/nv-linux1.h
	sed 's/CONFIG_XEN/CONFIG_ALB/g'  $(dirname)/kernel/nv1.c > $(dirname)/kernel/nv.c
	sed 's/CONFIG_XEN/CONFIG_ALB/g'  $(dirname)/kernel/nv-linux1.h > $(dirname)/kernel/nv-linux.h
	rm -f $(dirname)/kernel/nv1.c
	rm -f $(dirname)/kernel/nv-linux1.h

	# kernel module source
	mkdir -p $(CURDIR)/debian/temp/modules/nvidia-kernel
	cp -Rf $(CURDIR)/$(dirname)/kernel $(CURDIR)/debian/temp/modules/nvidia-kernel/
	if [ -e "$(CURDIR)/debian/temp/modules/nvidia-kernel/kernel/Makefile.kbuild" ] ; \
	then \
		cp -f $(CURDIR)/debian/temp/modules/nvidia-kernel/kernel/Makefile.kbuild \
		$(CURDIR)/debian/temp/modules/nvidia-kernel/kernel/Makefile ; \
	fi;

	test ! -f $(dirname)/tls/libnvidia-tls.so.$(PKG_version) || patchelf --add-needed libpthread.so.0 $(dirname)/tls/libnvidia-tls.so.$(PKG_version)
	test ! -f $(dirname32)/tls/libnvidia-tls.so.$(PKG_version) || patchelf --add-needed libpthread.so.0 $(dirname)/tls/libnvidia-tls.so.$(PKG_version)

	# Remove the dkms.conf(s) from upstream
	find $(CURDIR)/debian/temp/modules/nvidia-kernel/ -name dkms.conf* | xargs rm -f
	
	#mkdir -p $(CURDIR)/debian/dkms_nvidia
	cp -f $(CURDIR)/debian/dkms.conf $(CURDIR)/debian/temp/modules/nvidia-kernel/dkms.conf
	
	# Disable the stack markings of binaries for security reasons.
	# See (LP: #409456)
	find $(CURDIR)/$(dirname) -name *.so* | xargs -n1 execstack -c

ifeq ($(DEB_BUILD_ARCH),amd64)
	# Disable the stack markings of 32bit binaries on amd64
	# See (LP: #409456)
	find $(CURDIR)/$(dirname_x86) -name *.so* | xargs -n1 execstack -c || true

	# Temporarily rename libnvidia-opencl
	mv $(CURDIR)/$(dirname_x86)/libnvidia-opencl.so.$(PKG_version) \
	   $(CURDIR)/$(dirname_x86)/_libnvidia-opencl.so.$(PKG_version)
endif
	# Disable the stack markings of other binaries (only for the current arch)
	#   Note: don't use for loops or pass more than 1 argument to execstack
	#         or it will fail.
	execstack -c $(CURDIR)/$(dirname)/nvidia-xconfig || true
	execstack -c $(CURDIR)/$(dirname)/nvidia-smi || true

#binary-install/$(PKG_driver_dev)::

#binary-install/$(PKG_driver):: gen-abi-substvars
override_dh_install: gen-abi-substvars
	dh_install -p$(PKG_driver)
	dh_install -p$(PKG_driver_dev)
ifeq ($(DEB_BUILD_ARCH),amd64)
	#32 bit libraries on 64 bit
	dh_installdirs -p$(PKG_driver) "$(PKG_libdir32)"
	dh_installdirs -p$(PKG_driver) "$(PKG_tlsdir32)"

	dh_install -p$(PKG_driver) "$(dirname_x86)/libGL*.so*"  "$(PKG_libdir32)"
	dh_install -p$(PKG_driver) "$(dirname_x86)/libGL.la"  "$(PKG_libdir32)"
	dh_install -p$(PKG_driver) "$(dirname_x86)/libnvidia*.so*"  "$(PKG_libdir32)"

	dh_install -p$(PKG_driver)  "$(dirname_x86)/libvdpau*"  "$(PKG_vdpaudir32)"
	dh_install -p$(PKG_driver)  "$(dirname_x86)/tls/lib*"  "$(PKG_tlsdir32)"

	dh_install -p$(PKG_driver) "$(dirname_x86)/libnvidia-compiler*.so*"  "$(PKG_libdir32)"
	dh_install -p$(PKG_driver) "$(dirname_x86)/libnvcuvid*.so*"  "$(PKG_libdir32)"
	dh_install -p$(PKG_driver) "$(dirname_x86)/libnvidia-ml*.so*"  "$(PKG_libdir32)"

	# Move 32bit libnvidia-opencl back
	mv $(CURDIR)/$(dirname_x86)/_libnvidia-opencl.so.$(PKG_version) \
	   $(CURDIR)/$(dirname_x86)/libnvidia-opencl.so.$(PKG_version)
endif

	# Generate modaliases for Jockey and nvidia-common
	mkdir -p $(CURDIR)/debian/$(PKG_driver)-modaliases/usr/share/jockey/modaliases/
	sh -e $(CURDIR)/debian/nvidia_supported \
		$(PKG_module) $(PKG_driver) \
		$(dirname)/README.txt \
		$(dirname)/kernel/nv-kernel.o \
		> $(CURDIR)/debian/$(PKG_driver).modaliases
	# Take additional card ids from a text file
	for id in $(shell cat $(CURDIR)/debian/additional_card_ids); do \
		printf 'alias pci:v%08Xd%08Xsv*sd*bc03sc*i* %s %s\n' \
		0x10de "0x$$id" "$(PKG_module)" "$(PKG_driver)" \
		>> $(CURDIR)/debian/$(PKG_driver).modaliases; done
	dh_modaliases
	rm -f $(CURDIR)/debian/$(PKG_driver).modaliases

	# Configuration stuff
	# Blacklist any other driver that udev may want to load instead of $(PKG_module)
	# and create an alias for the module so that it can be used as nvidia
	#printf "$(newline),\n,${blacklist_file}" > $(CURDIR)/debian/$(PKG_driver)/lib/modprobe.d/$(PKG_driver).conf

	dh_install -p$(PKG_driver) $(dirname)/nvidia-xconfig.1.gz "$(mandir)";
	dh_install -p$(PKG_driver) $(dirname)/nvidia-smi.1.gz "$(mandir)";

	rm -rf debian/temp

	# Remove libnvidia-opencl
	find $(CURDIR)/debian/$(PKG_driver) -name 'libnvidia-opencl*.so*' | xargs /bin/rm -f

override_dh_strip:

override_dh_clean: regen-from-templates
	dh_clean
#clean: regen-from-templates
#	for file in $(CURDIR)/debian/*.in \
#	; do \
#		if [ `basename $$file` != "control.in" ]; then \
#			rm -f $(CURDIR)/debian/`basename $$file | sed 's/\.in\$$//'`; \
#		fi \
#	done
	rm -fr $(CURDIR)/$(dirname_x86) $(CURDIR)/$(dirname_x86_64)
	rm -fr debian/temp
	rm -f debian/$(PKG_driver).substvars

